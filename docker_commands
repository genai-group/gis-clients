
# Purpose: Set up the Docker Network and all containers so they can connect with each other
# Author:  Matt Poulton

############################
####    Docker Prune    ####
############################

# docker system prune -a
# docker system df


##############################
####    Docker Network    ####
##############################

docker network create gis-dl-local-network
docker network ls
docker network inspect gis-dl-local-network

# Docker Postgres instructions 
# https://scriptable.com/how-to-install-postgresql-mac-docker/


# docker stop postgres
# docker rm postgres

# docker run \
#     --network gis-dl-local-network --network-alias postgres \
#     --name postgres \
#     -e POSTGRES_HOST_AUTH_METHOD=trust postgres:9.6


########################
####    Postgres    ####
########################

# docker stop postgres-container
# docker rm postgres-container
# docker pull postgres:latest
# docker volume create postgres-data

docker run \
    --network gis-dl-local-network --network-alias postgres \
    --name postgres-container \
    -e POSTGRES_PASSWORD="12345asdf" \
    -p 5432:5432 \
    -v postgres-data:/var/lib/postgresql/data \
    -d postgres


######################
####    Milvus    ####
######################

docker stop milvus-etcd
docker rm milvus-etcd

docker-compose -f docker-compose-milvus.yml up 

#################################
####    Kafka & Zookeeper    ####
#################################

docker-compose -f docker-compose-kafka.yml up


######################
####    TypeDB    ####
######################

# NOTE: you must use this version of protobuf in the requirements.txt file => protobuf==3.20.0

# docker pull vaticle/typedb:latest

# docker stop typedb
# docker rm typedb

# docker run \
#     --network gis-dl-local-network --network-alias typedb \
#     --name typedb \
#     -d -v typedb-data:/opt/ \
#     -p 1729:1729 \
#     --platform linux/amd64 vaticle/typedb:latest

####################
####    Neo4j   ####
####################



# docker stop neo4j-container
# docker rm neo4j-container
# docker pull neo4j:latest

docker run \
    --network gis-dl-local-network --network-alias neo4j \
    --name neo4j-container \
    -p 7474:7474 -p 7687:7687 \
    -d \
    -v $HOME/neo4j/data:/data \
    -v $HOME/neo4j/logs:/logs \
    -v $HOME/neo4j/import:/var/lib/neo4j/import \
    -v $HOME/neo4j/plugins:/plugins \
    --env NEO4J_AUTH=$NEO4J_USER/$NEO4J_PASSWORD \
    neo4j:latest


####################
####    Mongo   ####
####################

# docker stop mongodb
# docker rm mongodb
# docker pull --platform linux/arm64 mongo:4.4

# docker run \
#     --network gis-dl-local-network --network-alias mongo \
#     --name mongodb-container \
#     -d -p 27017:27017 \
#     --platform linux/amd64 mongo

docker-compose -f docker-compose-mongo.yml up


# RUN WITH USERNAME AND PASSWORD
# docker run --name mongodb -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=myuser -e MONGO_INITDB_ROOT_PASSWORD=mypassword --platform linux/arm64 mongo


####################
####    Redis   ####
####################

# docker stop redis
# docker rm redis
# docker pull redis:latest

docker run \
    --network gis-dl-local-network --network-alias redis \
    --name redis-container \
    -d -p 6379:6379 \
    --platform linux/arm64 redis


####################
####    Vault   ####
####################

# docker stop vault
# docker rm vault
# docker pull vault:1.13.3

docker run \
    --network gis-dl-local-network --network-alias vault \
    --name vault-container \
    -d -p 8200:8200 \
    --cap-add=IPC_LOCK \
    -e 'VAULT_DEV_ROOT_TOKEN_ID=myroot' \
    -e 'VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200' \
    --platform linux/arm64 vault:1.13.3


######################
####    ollama    ####
######################

# docker pull ollama/ollama
# docker stop ollama
# docker rm ollama

docker run \
    --network gis-dl-local-network --network-alias ollama \
    -d -v ollama:/root/.ollama \
    -p 11434:11434 \
    --name ollama-container ollama/ollama

# Start llama2 model
docker exec -it ollama-container ollama run llama2

